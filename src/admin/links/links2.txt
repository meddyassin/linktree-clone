  function addLink() {
    appData && 
      firebase
        .database()
        .ref(appData[0].username + "/" + 1)
        .set({
          title: "title",
          url: "url",
          id: 1,
          counter: 1,
          prioritize: false,
          lock: false,
          analytics: "analytics",
        }).then(() => {
          console.log(appData)
        })
    // when a user clicks on add a link, we will sort the appData array
  }


   appData && 
      firebase
        .database()
        .ref(appData[0].username)
        .set(appData).then(() => {
          console.log(appData)
        })





















  // adding links
  // const [addLinkTrigger, setAddLinkTrigger]
  // I should map through the user_links
  // change the id + 1
  // unshift the new array 



  // storing the new order in linksArray & triggering effect
  const [triggerEffect, setTriggerEffect] = useState(0);  

  function handleOnDragEnd(result) {
    if (!result.destination) return;

    const items = Array.from(linksArray)
    const [reorderedItem] = items.splice(result.source.index, 1)
    items.splice(result.destination.index, 0, reorderedItem)

    updateLinksArray(items);

    setTriggerEffect(triggerEffect + 1);
  }

  // when effect is triggered, everything will be stored in firebase
  let counter = 0;
  useEffect(() => {
    appData &&
      linksArray &&
      linksArray.length === 1 &&
      linksArray.map((link) => {
        counter = counter + 1;
        firebase
          .database()
          .ref(appData[0].username + "/user_info" + counter)
          .set({
            title: appData && link.title,
            url: appData && link.url,
            counter: counter,
            id: appData && link.id,
            prioritize: false,
            lock: false,
            analytics: "analytics",
          });
      });
  }, [triggerEffect]);
























let dbLinksArray = [];
  const [linksArray, updateLinksArray] = useState(dbLinksArray);

  useEffect(() => {
    appData && 
    appData
    .map((item) => item.id === 'user_links' && updateLinksArray(Object.values(item).slice(0,-1)))
  }, [appData])

  function removeLink() {
    linksArray && linksArray.length > 0 && linksArray.splice(keyyy, 1) 
    console.log(linksArray)
    appData && linksArray &&
    firebase
      .database()
      .ref(appData[0].username + "/" + "user_links")
      .set(linksArray)
  }